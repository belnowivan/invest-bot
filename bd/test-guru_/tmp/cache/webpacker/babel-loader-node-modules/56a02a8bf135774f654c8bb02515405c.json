{"ast":null,"code":"var compareRowsAsc = function compareRowsAsc(row1, row2) {\n  var testTitle1 = row1.querySelector('td').textContent;\n  var testTitle2 = row2.querySelector('td').textContent;\n\n  if (testTitle1 < testTitle2) {\n    return -1;\n  }\n\n  if (testTitle1 > testTitle2) {\n    return 1;\n  }\n\n  return 0;\n};\n\nvar compareRowsDesc = function compareRowsDesc(row1, row2) {\n  var testTitle1 = row1.querySelector('td').textContent;\n  var testTitle2 = row2.querySelector('td').textContent;\n\n  if (testTitle1 > testTitle2) {\n    return -1;\n  }\n\n  if (testTitle1 < testTitle2) {\n    return 1;\n  }\n\n  return 0;\n};\n\nvar sortRowsByTitle = function sortRowsByTitle(_ref) {\n  var target = _ref.target;\n  var table = document.querySelector('table');\n  var rows = table.querySelectorAll('tr');\n  var sortedRows = []; // select all table rows except the first one which is the header\n\n  for (var i = 1; i < rows.length; i += 1) {\n    sortedRows.push(rows[i]);\n  }\n\n  if (target.querySelector('.octicon-arrow-up').classList.contains('hide')) {\n    sortedRows.sort(compareRowsAsc);\n    target.querySelector('.octicon-arrow-up').classList.remove('hide');\n    target.querySelector('.octicon-arrow-down').classList.add('hide');\n  } else {\n    target.querySelector('.octicon-arrow-down').classList.remove('hide');\n    target.querySelector('.octicon-arrow-up').classList.add('hide');\n    sortedRows.sort(compareRowsDesc);\n  }\n\n  var sortedTable = document.createElement('table');\n  sortedTable.classList.add('table');\n  sortedTable.appendChild(rows[0]);\n\n  for (var _i = 0; _i < sortedRows.length; _i += 1) {\n    sortedTable.appendChild(sortedRows[_i]);\n  }\n\n  table.parentNode.replaceChild(sortedTable, table);\n};\n\ndocument.addEventListener('turbolinks:load', function () {\n  var control = document.querySelector('.sort-by-title');\n\n  if (control) {\n    control.addEventListener('click', sortRowsByTitle);\n  }\n});","map":{"version":3,"sources":["/home/ivan/bd/test-guru_/app/javascript/utilities/sorting.js"],"names":["compareRowsAsc","row1","row2","testTitle1","querySelector","textContent","testTitle2","compareRowsDesc","sortRowsByTitle","target","table","document","rows","querySelectorAll","sortedRows","i","length","push","classList","contains","sort","remove","add","sortedTable","createElement","appendChild","parentNode","replaceChild","addEventListener","control"],"mappings":"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","sourcesContent":["const compareRowsAsc = (row1, row2) => {\n  const testTitle1 = row1.querySelector('td').textContent;\n  const testTitle2 = row2.querySelector('td').textContent;\n  if (testTitle1 < testTitle2) {\n    return -1;\n  }\n  if (testTitle1 > testTitle2) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareRowsDesc = (row1, row2) => {\n  const testTitle1 = row1.querySelector('td').textContent;\n  const testTitle2 = row2.querySelector('td').textContent;\n  if (testTitle1 > testTitle2) {\n    return -1;\n  }\n  if (testTitle1 < testTitle2) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst sortRowsByTitle = ({ target }) => {\n  const table = document.querySelector('table');\n  const rows = table.querySelectorAll('tr');\n  const sortedRows = [];\n  // select all table rows except the first one which is the header\n  for (let i = 1; i < rows.length; i += 1) {\n    sortedRows.push(rows[i]);\n  }\n\n  if (target.querySelector('.octicon-arrow-up').classList.contains('hide')) {\n    sortedRows.sort(compareRowsAsc);\n    target.querySelector('.octicon-arrow-up').classList.remove('hide');\n    target.querySelector('.octicon-arrow-down').classList.add('hide');\n  } else {\n    target.querySelector('.octicon-arrow-down').classList.remove('hide');\n    target.querySelector('.octicon-arrow-up').classList.add('hide');\n    sortedRows.sort(compareRowsDesc);\n  }\n\n  const sortedTable = document.createElement('table');\n  sortedTable.classList.add('table');\n  sortedTable.appendChild(rows[0]);\n  for (let i = 0; i < sortedRows.length; i += 1) {\n    sortedTable.appendChild(sortedRows[i]);\n  }\n  table.parentNode.replaceChild(sortedTable, table);\n};\n\ndocument.addEventListener('turbolinks:load', () => {\n  const control = document.querySelector('.sort-by-title');\n  if (control) {\n    control.addEventListener('click', sortRowsByTitle);\n  }\n});\n"]},"metadata":{},"sourceType":"module"}